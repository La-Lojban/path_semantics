separators: "()[]{},;:/*+-";

Node {
    debug_id: 1000,
    name: "brackets",
    rule: SeparatedBy {
        optional: true,
        allow_trail: false,
        rule: Optional {
            rule: Sequence {
                args: [
                    Token {
                        text: "[",
                    },
                    Select {
                        args: [
                            Token {
                                text: ":",
                            },
                            UntilAnyOrWhitespace {
                                any_characters: separators,
                                property: None,
                            },
                        ]
                    },
                    Token {
                        text: "]",
                    },
                ],
            }
        },
        by: Whitespace {
            optional: false,
        }
    }
};

Node {
    debug_id: 2000,
    name: "path",
    rule: Sequence {
        args: [
            Optional {
                rule: Token {
                    text: "::",
                    property: Some("root"),
                },
            },
            SeparatedBy {
                optional: false,
                allow_trail: true,
                rule: UntilAnyOrWhitespace {
                    any_characters: separators,
                    property: Some("name"),
                },
                by: Token {
                    text: "::",
                },
            },
        ]
    }),
};

Node {
    debug_id: 3000,
    name: "arg",
    rule: Sequence {
        args: [
            NodeRef::Name("brackets", 0),
            NodeRef::Name("path", 0),
            NodeRef::Name("brackets", 0),
            Optional {
                rule: NodeRef::Name("repeated_arguments", 0),
            }
        ]
    }
};

Node {
    debug_id: 4000,
    name: "arguments",
    rule: Sequence {
        args: [
            Token {
                text: "(",
            },
            Whitespace {
                optional: true,
            },
            SeparatedBy {
                optional: true,
                allow_trail: true,
                rule: Select {
                    args: [
                        Number {
                            property: None,
                            allow_underscore: true,
                        },
                        Text {
                            allow_empty: true,
                            property: None,
                        },
                        NodeRef::Name("arguments", 0),
                        NodeRef::Name("member_lambda", 0),
                        NodeRef::Name("lambda", 0),
                        NodeRef::Name("arg", 0)),
                    ]
                },
                by: Sequence {
                    args: [
                        Token {
                            text: ",",
                        },
                        Whitespace {
                            optional: false,
                        },
                    ],
                },
            },
            Whitespace {
                optional: true,
            },
            Token {
                text: ")",
            },
        ]
    },
};

Node {
    debug_id: 5000,
    name: "repeated_arguments",
    rule: Repeat {
        optional: false,
        rule: NodeRef::Name("arguments", 0),
    }
};

Node {
    debug_id: 6000,
    name: "comment",
    rule: Sequence {
        args: [
            Whitespace {
                optional: true,
            },
            Token {
                text: "//",
            },
            UntilAny {
                any_characters: "\n",
                optional: true,
                property: None,
            },
        ],
    }
};

Node {
    debug_id: 7000,
    name: "lambda",
    rule: Sequence {
        args: [
            Whitespace {
                optional: true,
            },
            Optional {
                rule: Sequence {
                    args: [
                        Token {
                            text: "fn",
                        },
                        Whitespace {
                            optional: true,
                        },
                    ]
                },
            },
            UntilAnyOrWhitespace {
                any_characters: separators,
                optional: true,
                property: Some("name"),
            },
            Whitespace {
                optional: true,
            },
            NodeRef::Name("brackets", 0),
            NodeRef::Name("repeated_arguments", 0),
            Whitespace {
                optional: false,
            },
            Token {
                text: "->",
            },
            Whitespace {
                optional: false,
            },
            NodeRef::Name("arg", 0),
            Whitespace {
                optional: true,
            },
        ]
    }
};

Node {
    debug_id: 8000,
    name: "fn",
    rule: Sequence {
        args: [
            Optional {
                rule: Sequence {
                    args: [
                        Token {
                            text: "pub",
                        },
                        Whitespace {
                            optional: true,
                        },
                    ]
                },
            },
            NodeRef::Name("lambda", 0),
            Token {
                text: ";",
            },
            Whitespace {
                optional: true,
            },
            Optional {
                rule: NodeRef::Name("comment", 0)
            },
        ]
    }
};


Node {
    debug_id: 9000,
    name: "use",
    rule: Sequence {
        args: [
            Whitespace {
                optional: true,
            },
            Optional {
                rule: Sequence {
                    args: [
                        Token {
                            text: "pub",
                        },
                        Whitespace {
                            optional: true,
                        },
                    ]
                },
            },
            Token {
                text: "use",
            },
            Whitespace {
                optional: false,
            },
            NodeRef::Name("path", 0),
            Optional {
                rule: Token {
                    text: "*",
                },
            },
            Token {
                text: ";",
            },
        ]
    })
};

Node {
    debug_id: 10000,
    name: "module",
    rule: Sequence {
        args: [
            Whitespace {
                optional: true,
            },
            Optional {
                rule: Sequence {
                    args: [
                        Token {
                            text: "pub",
                        },
                        Whitespace {
                            optional: true,
                        },
                    ]
                },
            },
            Token {
                text: "mod",
            },
            Whitespace {
                optional: false,
            },
            UntilAnyOrWhitespace {
                any_characters: separators,
                optional: true,
                property: "name",
            },
            Token {
                text: ";",
            },
        ]
    }
};

Node {
    debug_id: 11000,
    name: "member_lambda",
    rule: Sequence {
        args: [
            NodeRef::Name("arg", 0),
            Whitespace {
                optional: true,
            },
            Token {
                text: ":",
            },
            Whitespace {
                optional: false,
            },
            NodeRef::Name("arg", 0),
        ]
    },
};

Node {
    debug_id: 12000,
    name: "member",
    rule: Sequence {
        args: [
            NodeRef::Name("member_lambda", 0),
            Token {
                text: ";",
            },
        ]
    },
};

Node {
    debug_id: 13000,
    name: "line_rule",
    rule: Select {
        args: [
            NodeRef::Name("comment", 0),
            NodeRef::Name("use", 0),
            NodeRef::Name("module", 0),
            NodeRef::Name("member", 0),
            NodeRef::Name("fn", 0),
        ]
    }
};

Lines {
    debug_id: 14000,
    rule: line_rule,
};
