fn main() {
    xs := [[0, 1], [1, 0], [0, 2], [1, 2], [2, 1], [2, 3]]
    fs := sift i {unwrap(test(xs[i][0], xs[i][1]))}
    // print_data(fs[4])
    c := infer(sift i {fs[i].equivs})

    /*
    xs := [0, 1, 2]
    fs := sift i {unwrap(test(xs[i]))}
    // print_data(fs[0])
    c := infer(sift i {fs[i].equivs})
    */

    /*
    a := unwrap(test(2, 3))
    b := unwrap(test(3, 3))
    c := unwrap(test(2, 2))
    d := unwrap(test(3, 2))
    e := unwrap(test(0, 1))
    f := unwrap(test(1, 0))
    print_data(a)
    c := infer([a.equivs, b.equivs, c.equivs, d.equivs, e.equivs, f.equivs])
    */

    /*
    // Lists, including empty.
    a := unwrap(test([], [1]))
    b := unwrap(test([1], [2, 3]))
    c := unwrap(test([2, 4], [8, 1]))
    d := unwrap(test([8, 1], [2, 4]))
    print_data(a)
    c := infer([a.equivs, b.equivs, c.equivs, d.equivs])
    */

    /*
    // Non-empty lists.
    a := unwrap(test([1], [2, 3]))
    b := unwrap(test([2, 4], [8, 1, 3]))
    c := unwrap(test([2, 4, 5], [8, 1, 3]))
    d := unwrap(test([8, 1, 3], [2, 4, 5]))
    print_data(a)
    c := infer([a.equivs, b.equivs, c.equivs, d.equivs])
    */

    /*
    v := [0, 1]
    r := []
    for i, j, k {
        a := unwrap(test(v[i], v[j], v[k]))
        // print_data(a)
        push(mut r, a.equivs)
    }
    c := infer(r)
    */

    /*
    // `sin(x)` is approximately equal to `x` when near 0.
    input := [-0.2, -0.1, 0, 0.1, 0.2]
    a := {}
    eps := 0.002
    c := infer(sift i {
        a = unwrap(test(input[i], eps))
        a.equivs
    })
    */

    if len(c) > 0 {
        println("========== Found equivalences!!! ==========\n")
        for i {println(link {str(c[i][0])" == "str(c[i][1])})}
        println("\n===========================================")
    } else {
        println("(No equivalences found)")
    }
}

// prime under multiplication.
fn test(x, y) -> res[{}] {
    data := {
        mul: \(a) = \(b) = (grab a) * b,
        is_prime: \(a) = if a < 2 {false} else {true && all i [2, a) {(a % i) != 0}},
        is_one: \(a) = a == 1,
        or: \(a) = \(b) = (grab a) || b,
        and: \(a) = \(b) = (grab a) && b,
        imp: \(a) = \(b) = if grab a {clone(b)} else {true},
        eq: \(a) = \(b) = (grab a) == b,
        not: \(a) = !a,
        t: true,
        x: x,
        y: y,
    }
    filter := [
        ["mul"],
        ["mul(x)"],
        ["or"],
        ["or(is_one(x))"],
        ["or(is_prime(x))"],
        ["and"],
        ["and(is_one(x))"],
        ["and(is_prime(x))"],
        ["imp"],
        ["eq"],
        ["eq(is_prime(y))"],
        ["imp(is_one(x))"],
        ["not"],
        ["imp(not(is_one(y)))"],
    ]
    explore := [
        ["is_prime", "x"],
        ["is_prime", "y"],
        ["mul", "x"],
        ["mul(x)", "y"],
        ["is_prime", "mul(x)(y)"],
        ["is_one", "x"],
        ["is_one", "y"],
        ["is_one", "mul(x)(y)"],
        ["or", "is_one(x)"],
        ["or(is_one(x))", "is_one(y)"],
        ["or", "is_prime(x)"],
        ["or(is_prime(x))", "is_one(y)"],
        ["and", "is_one(x)"],
        ["and", "is_prime(x)"],
        ["and(is_one(x))", "is_prime(y)"],
        ["and(is_one(x))", "is_one(y)"],
        ["and(is_prime(x))", "is_one(y)"],
        ["and(is_prime(x))", "is_prime(y)"],
        ["imp", "is_one(x)"],
        ["eq", "is_prime(y)"],
        ["eq(is_prime(y))", "is_prime(mul(x)(y))"],
        ["imp(is_one(x))", "eq(is_prime(y))(is_prime(mul(x)(y)))"],
        ["not", "is_one(y)"],
        ["imp", "not(is_one(y))"],
        ["imp(not(is_one(y)))", "eq(is_prime(y))(is_prime(mul(x)(y)))"],
    ]

    return wrap_fill(data: mut data, explore: explore, filter: filter)
}

/*
fn test(x) -> res[{}] {
    data := {
        x: x,
        cos: \(x) = cos(x),
        sin: \(x) = sin(x),
        two: 2,
        mul: \(a) = \(b) = (grab a) * b,
        sub: \(a) = \(b) = (grab a) - b,
        approx_eq: \(eps) = \(a) = \(b) = abs((grab a) - b) < (grab '2 eps),
        eps: 0.00001,
        t: true,
    }
    filter := [
        ["cos"],
        ["sin"],
        ["mul"],
        ["mul(two)"],
        ["mul(cos(x))"],
        ["mul(sin(x))"],
        ["sub"],
        ["approx_eq"],
        ["approx_eq(eps)"],
        ["approx_eq(eps)(sin(mul(two)(x)))"],
        ["approx_eq(eps)(cos(mul(two)(x)))"],
        ["sub(mul(cos(x))(cos(x)))"],
    ]
    explore := [
        ["cos", "x"],
        ["sin", "x"],
        ["mul", "two"],
        ["mul", "cos(x)"],
        ["mul(two)", "x"],
        ["cos", "mul(two)(x)"],
        ["sin", "mul(two)(x)"],
        ["mul(cos(x))", "sin(x)"],
        ["mul(two)", "mul(cos(x))(sin(x))"],
        ["approx_eq", "eps"],
        ["approx_eq(eps)", "sin(mul(two)(x))"],
        ["approx_eq(eps)(sin(mul(two)(x)))", "mul(two)(mul(cos(x))(sin(x)))"],
        ["mul(cos(x))", "cos(x)"],
        ["mul", "sin(x)"],
        ["mul(sin(x))", "sin(x)"],
        ["sub", "mul(cos(x))(cos(x))"],
        ["sub(mul(cos(x))(cos(x)))", "mul(sin(x))(sin(x))"],
        ["approx_eq(eps)", "cos(mul(two)(x))"],
        ["approx_eq(eps)(cos(mul(two)(x)))", "sub(mul(cos(x))(cos(x)))(mul(sin(x))(sin(x)))"],
    ]

    return wrap_fill(data: mut data, explore: explore, filter: filter)
}
*/

/*
fn test(x, eps) -> res[{}] {
    data := {
        x: x,
        sin: \(a) = sin(a),
        cos: \(a) = cos(a),
        approx_eq: \(eps) = \(a) = \(b) = abs((grab a) - b) < (grab '2 eps),
        t: true,
        eps: eps,
        one: 1,
        zero: 0,
        pi: 3.14159265358979323846264338327950288,
        tau: 3.14159265358979323846264338327950288 * 2,
        neg: \(a) = -a,
        pi_half: 3.14159265358979323846264338327950288 / 2,
    }
    filter := [
        ["sin"],
        ["approx_eq"],
        ["approx_eq(eps)"],
        ["approx_eq(eps)(sin(x))"],
        ["cos"],
        ["neg"],
    ]
    explore := [
        ["sin", "x"],
        ["approx_eq", "eps"],
        ["approx_eq(eps)", "sin(x)"],
        ["approx_eq(eps)(sin(x))", "x"],
        /*
        ["cos", "zero"],
        ["sin", "zero"],
        ["cos", "pi"],
        ["neg", "one"],
        ["sin", "pi_half"],
        ["sin", "tau"],
        ["cos", "tau"],
        */
    ]

    return wrap_fill(data: mut data, explore: explore, filter: filter)
}
*/

/*
fn test(x, y) -> res[{}] {
    data := {
        x: x,
        y: y,
        len: \(a) = len(a),
        add: \(a) = \(b) = (grab a) + b,
        concat: \(a) = \(b) = {
            return = grab a
            for i {push(mut return, b[i])}
        },
        sum: \(a) = sum i {a[i]},
        sum2: \(a) = \(b) = (grab a) + b,
        min: \(a) = min i {a[i]},
        min2: \(a) = \(b) = min([grab a, b]),
        max: \(a) = max i {a[i]},
        max2: \(a) = \(b) = max([grab a, b]),
    }
    filter := [
        ["add"],
        ["add(len(x))"],
        ["concat"],
        ["concat(x)"],
        ["min2"],
        ["min2(min(x))"],
        ["max2"],
        ["max2(max(x))"],
        ["sum2"],
        ["sum2(sum(x))"],
    ]
    explore := [
        ["len", "x"],
        ["len", "y"],
        ["add", "len(x)"],
        ["add(len(x))", "len(y)"],
        ["concat", "x"],
        ["concat(x)", "y"],
        ["len", "concat(x)(y)"],
        ["sum", "x"],
        ["sum", "y"],
        ["sum", "concat(x)(y)"],
        ["min", "x"],
        ["min", "y"],
        ["min", "concat(x)(y)"],
        ["min2", "min(x)"],
        ["min2(min(x))", "min(y)"],
        ["max", "x"],
        ["max", "y"],
        ["max", "concat(x)(y)"],
        ["max2", "max(x)"],
        ["max2(max(x))", "max(y)"],
        ["sum2", "sum(x)"],
        ["sum2(sum(x))", "sum(y)"],
    ]

    return wrap_fill(data: mut data, explore: explore, filter: filter)
}
*/

/*
fn test(x, y, z) -> res[{}] {
    data := {
        le: \(a) = \(b) = (grab a) <= b,
        and: \(a) = \(b) = (grab a) && b,
        imp: \(a) = \(b) = if grab a {clone(b)} else {true},
        x: x,
        y: y,
        z: z,
        t: true,
    }
    filter := [
        ["imp"],
        ["and"],
        ["le"],
        ["le(x)"],
        ["le(y)"],
        ["and(le(x)(y))"],
        ["imp(and(le(x)(y))(le(y)(z)))"],
        ["le(y)(y)"],
        ["le(x)(x)"],
        ["and(le(x)(y))(t)"],
    ]
    explore := [
        ["le", "x"],
        ["le(x)", "y"],
        ["le(x)", "z"],
        ["le", "y"],
        ["le(y)", "z"],
        ["and", "le(x)(y)"],
        ["and(le(x)(y))", "le(y)(z)"],
        ["imp", "and(le(x)(y))(le(y)(z))"],
        ["imp(and(le(x)(y))(le(y)(z)))", "le(x)(z)"],
    ]

    return wrap_fill(data: mut data, explore: explore, filter: filter)
}
*/

/*
fn test(x, y) -> res[{}] {
    data := {
        gt: \(a) = \(b) = (grab a) > b,
        le: \(a) = \(b) = (grab a) <= b,
        not: \(a) = !a,
        x: x,
        y: y,
    }
    filter := [
        ["not"],
        ["gt"],
        ["le"],
        ["le(x)"],
        ["gt(x)"],
    ]
    explore := [
        ["le", "x"],
        ["le(x)", "y"],
        ["not", "le(x)(y)"],
        ["gt", "x"],
        ["gt(x)", "y"],
    ]

    return wrap_fill(data: mut data, explore: explore, filter: filter)
}
*/

/*
fn test(x, y) -> res[{}] {
    data := {
        add: \(a) = \(b) = (grab a) + b,
        mul: \(a) = \(b) = (grab a) * b,
        even: \(a) = (a % 2) == 0,
        and: \(a) = \(b) = (grab a) && b,
        or: \(a) = \(b) = (grab a) || b,
        is_zero: \(a) = a == 0,
        eq: \(a) = \(b) = (grab a) == b,
        xy: [x, y],
        fst: \(xy) = clone(xy[0]),
        snd: \(xy) = clone(xy[1]),
    }
    filter := [
        ["mul"],
        ["or"],
        ["add"],
        ["and"],
        ["eq"],
        ["eq(even(fst(xy)))"],
        ["add(fst(xy))"],
        ["mul(fst(xy))"],
        ["or(even(fst(xy)))"],
        ["and(is_zero(fst(xy)))"],
        ["or(is_zero(fst(xy)))"],
    ]
    explore := [
        ["fst", "xy"],
        ["snd", "xy"],
        ["even", "fst(xy)"],
        ["even", "snd(xy)"],
        ["is_zero", "fst(xy)"],
        ["is_zero", "snd(xy)"],
        ["eq", "even(fst(xy))"],
        ["eq(even(fst(xy)))", "even(snd(xy))"],
        ["add", "fst(xy)"],
        ["add(fst(xy))", "snd(xy)"],
        ["even", "add(fst(xy))(snd(xy))"],
        ["is_zero", "add(fst(xy))(snd(xy))"],
        ["mul", "fst(xy)"],
        ["mul(fst(xy))", "snd(xy)"],
        ["is_zero", "mul(fst(xy))(snd(xy))"],
        ["even", "mul(fst(xy))(snd(xy))"],
        ["or", "even(fst(xy))"],
        ["or(even(fst(xy)))", "even(snd(xy))"],
        ["and", "is_zero(fst(xy))"],
        ["and(is_zero(fst(xy)))", "is_zero(snd(xy))"],
        ["or", "is_zero(fst(xy))"],
        ["or(is_zero(fst(xy)))", "is_zero(snd(xy))"],
    ]

    return wrap_fill(data: mut data, explore: explore, filter: filter)
}
*/
