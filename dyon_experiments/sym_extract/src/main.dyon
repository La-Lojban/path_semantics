fn main() {
    fs := knowledge_functions()

    /*
    // bool binary.
    data := [
        [false, false],
        [false, true],
        [true, false],
        [true, true],
    ]
    */

    /*
    // f64 binary integers.
    data := [
        [4, 4],
        [2, 3],
        [2, 2],
        [2, 4],
        [3, 2],
        [4, 2],
        [3, 3],
        [6, 3],
        [7, 2],
        [8, 3],
        [3, 8],
        [2, 7],
        [-2, 3],
        [-2, 2],
        [-3, 2],
        [-5, 3],
        [2, -3],
        [2, -2],
        [3, -2],
        [5, -3],
        [-2, -3],
        [-2, -2],
        [-3, -2],
        [-5, -3],
    ]
    */

    /*
    // Square positive integers.
    data := [
        [4],
        [16],
        [9],
        [81],
    ]
    */

    // List binary.
    data := [
        [[], []],
        [[1], []],
        [[], [1]],
        [[1], [1]],
        [[1, 2], []],
        [[1, 2], [1, 2]],
        [[1, 2, 3], [1, 3]]
    ]

    /*
    data := [
        [[1, 2, 3]],
    ]
    */

    sym_candidates := find_sym_candidates(functions: fs, data: data)
    sym_candidates := filter_id(sym_candidates)

    println(len(sym_candidates))

    sym_paths := find_sym_paths(
        functions: fs,
        candidates: sym_candidates,
        data: data
    )

    new_sym_paths := filter_bad(sympaths: sym_paths)

    println(new_sym_paths)
    n := len(new_sym_paths)
    println(n)
    if n > 0 {println(new_sym_paths[n*random()])}
}
